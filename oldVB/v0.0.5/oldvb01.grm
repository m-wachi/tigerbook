(* val table = ref (nil: (string * int) list) *)
type table = string -> int
val emptytable = fn j => raise Fail("uninitialized var: " ^ j)
fun printInt i = print (Int.toString i)
%%

%term ID of string | INT of int | STRING of string
    | PRINT of string 
    | EQUAL
    | DIM
    | AS
    | SUB
    | END
    | TY_STRING
    | TY_INT
    | LPAREN | RPAREN
    | COMMA
    | LINE_TERM
    | COMMENT of string
    | EOF

%nonterm  prog of Absyn.lgline list
       | logical_lines of Absyn.lgline list
       | logical_line of Absyn.lgline
       | local_var_decl of Absyn.statement
       | statement of Absyn.statement
       | def_params of Absyn.field list
       | def_param of Absyn.field
       | proc_params of Absyn.exp list
       | exp of Absyn.exp
       | vbtype of Absyn.vbtype

%name Oldvb01

%verbose

%start prog
%eop EOF
%noshift EOF
%pos int

%%
prog: logical_lines                   (logical_lines)

logical_lines: 
    logical_line                       ([logical_line])
    | logical_lines logical_line       (logical_lines @ [logical_line])

(*
logical_line: 
    statement COMMENT LINE_TERM      ((statement), COMMENT)
    | statement LINE_TERM      ((statement), "")
    | COMMENT LINE_TERM              (Absyn.BlankLine, COMMENT)
    | LINE_TERM                      (Absyn.BlankLine, "")
    | SUB ID LPAREN def_params RPAREN LINE_TERM logical_lines END SUB LINE_TERM    
        ((Absyn.ProcDec ((Symbol.symbol ID), (def_params), logical_lines)), "")
*)

logical_line: 
    statement COMMENT LINE_TERM      ((statement), COMMENT)
    | statement LINE_TERM      ((statement), "")
    | COMMENT LINE_TERM              (Absyn.BlankLine, COMMENT)
    | LINE_TERM                      (Absyn.BlankLine, "")
    | SUB ID LPAREN def_params RPAREN LINE_TERM logical_lines END SUB LINE_TERM    
        (Absyn.ProcDec {name=(Symbol.symbol ID), params=(def_params), body=logical_lines, pos=0}, "")


def_params: 
    def_param   ([def_param])
    | def_param COMMA def_params  (def_param :: def_params)
    | ([])
	
(*
def_param: ID AS vbtype (Absyn.DefParam ((Absyn.SimpleVar(Symbol.symbol ID, 0)), (vbtype)))
*)
def_param: ID AS vbtype ({name=(Symbol.symbol ID), escape=ref false, vbty=(vbtype), pos=0})

statement:
    local_var_decl                   (local_var_decl)
    | ID EQUAL exp                   (Absyn.AssignStmt (Absyn.SimpleVar(Symbol.symbol ID, 0), exp))
    | ID proc_params                 (Absyn.CallProc ((Symbol.symbol ID), (proc_params)))

proc_params:
     exp          ([exp])
     
local_var_decl: 
    DIM ID AS vbtype (Absyn.LclVarDecl ((Absyn.SimpleVar(Symbol.symbol ID, 0)), (vbtype)))
    | DIM ID LPAREN RPAREN AS vbtype (Absyn.LclVarDecl ((Absyn.SimpleVar(Symbol.symbol ID, 0)), (vbtype)))
    
vbtype:
    TY_STRING (Absyn.VbTySimple Absyn.VbTyString)
    | TY_INT  (Absyn.VbTySimple Absyn.VbTyInt)
  
exp: INT                         (Absyn.IntExp INT)
    | STRING                     (Absyn.StringExp (STRING, 0))


